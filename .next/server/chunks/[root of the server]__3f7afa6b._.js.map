{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Abel/Documents/Code/Undergraduate%20Final%20Project/reroute/src/app/api/routes/%5Brouteid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize Supabase client\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { routeid: string } }\r\n) {\r\n  try {\r\n    const routeId = params.routeid;\r\n    \r\n    if (!routeId) {\r\n      return NextResponse.json(\r\n        { error: 'Route ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Fetch route details from Supabase\r\n    const { data, error } = await supabase\r\n      .from('routes')\r\n      .select('*')\r\n      .eq('route_id', routeId)\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Error fetching route:', error);\r\n      return NextResponse.json(\r\n        { error: 'Failed to fetch route details' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    if (!data) {\r\n      return NextResponse.json(\r\n        { error: 'Route not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    console.error('Error in route API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,6BAA6B;AAC7B,MAAM,cAAc,gFAAwC;AAC5D,MAAM,cAAc,wPAA6C;AACjE,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAEpC,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAmC;IAE3C,IAAI;QACF,MAAM,UAAU,OAAO,OAAO;QAE9B,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,UACL,MAAM,CAAC,KACP,EAAE,CAAC,YAAY,SACf,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkB,GAC3B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}