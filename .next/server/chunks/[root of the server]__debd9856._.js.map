{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Abel/Documents/Code/Undergraduate%20Final%20Project/reroute/src/app/route/api/%5Brouteid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { routeid: string } }\r\n) {\r\n  try {\r\n    // Ensure params is properly awaited\r\n    const routeId = params.routeid;\r\n    \r\n    // Transit.land API key\r\n    const apiKey = '4i0HhaRLe0jBSotDmxETH05X2iwrgNcJ';\r\n    \r\n    // Log the route ID for debugging\r\n    console.log(`Fetching route with ID: ${routeId}`);\r\n    \r\n    // Fetch data from Transit.land API\r\n    // The route ID format in Transit.land is \"r-9qh0-{routeId}\"\r\n    const response = await fetch(\r\n      `https://transit.land/api/v2/rest/routes/r-9qh0-${routeId}?api_key=${apiKey}`,\r\n      {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        },\r\n        next: { revalidate: 60 }, // Cache for 60 seconds\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      console.error(`Transit.land API error: ${response.status}`);\r\n      return NextResponse.json({ \r\n        error: `Transit.land API error: ${response.status}`,\r\n        routes: [] // Add empty routes array to match expected format\r\n      }, { status: response.status });\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Check if the response contains routes\r\n    if (!data.routes || data.routes.length === 0) {\r\n      console.error('No route found with ID:', routeId);\r\n      return NextResponse.json({ \r\n        error: 'Route not found',\r\n        routes: [] // Add empty routes array to match expected format\r\n      }, { status: 404 });\r\n    }\r\n    \r\n    // Return the data\r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    console.error('Error fetching route:', error);\r\n    return NextResponse.json({ \r\n      error: 'Failed to fetch route',\r\n      routes: [] // Add empty routes array to match expected format\r\n    }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAAmC;IAE3C,IAAI;QACF,oCAAoC;QACpC,MAAM,UAAU,OAAO,OAAO;QAE9B,uBAAuB;QACvB,MAAM,SAAS;QAEf,iCAAiC;QACjC,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,SAAS;QAEhD,mCAAmC;QACnC,4DAA4D;QAC5D,MAAM,WAAW,MAAM,MACrB,CAAC,+CAA+C,EAAE,QAAQ,SAAS,EAAE,QAAQ,EAC7E;YACE,SAAS;gBACP,UAAU;YACZ;YACA,MAAM;gBAAE,YAAY;YAAG;QACzB;QAGF,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC,CAAC,wBAAwB,EAAE,SAAS,MAAM,EAAE;YAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO,CAAC,wBAAwB,EAAE,SAAS,MAAM,EAAE;gBACnD,QAAQ,EAAE,CAAC,kDAAkD;YAC/D,GAAG;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAC/B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,wCAAwC;QACxC,IAAI,CAAC,KAAK,MAAM,IAAI,KAAK,MAAM,CAAC,MAAM,KAAK,GAAG;YAC5C,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP,QAAQ,EAAE,CAAC,kDAAkD;YAC/D,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,kBAAkB;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,QAAQ,EAAE,CAAC,kDAAkD;QAC/D,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}