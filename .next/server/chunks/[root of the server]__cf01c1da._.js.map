{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Abel/Documents/Code/Undergraduate%20Final%20Project/reroute/src/app/api/routes/%5Brouteid%5D/stops/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { routeid: string } }\n) {\n  try {\n    const routeId = params.routeid;\n    \n    if (!routeId) {\n      return NextResponse.json(\n        { error: 'Route ID is required' },\n        { status: 400 }\n      );\n    }\n    \n    // Generate mock stops data\n    // In a real application, this would fetch from a database\n    const mockStops = Array.from({ length: 10 }, (_, i) => ({\n      stopId: `stop-${routeId}-${i + 1}`,\n      stopName: `Stop ${i + 1} on Route ${routeId}`,\n      latitude: 33.878840 + (Math.random() - 0.5) * 0.01,\n      longitude: -117.884973 + (Math.random() - 0.5) * 0.01,\n      arrivalTime: `${Math.floor(Math.random() * 24).toString().padStart(2, '0')}:${Math.floor(Math.random() * 60).toString().padStart(2, '0')}`,\n      departureTime: `${Math.floor(Math.random() * 24).toString().padStart(2, '0')}:${Math.floor(Math.random() * 60).toString().padStart(2, '0')}`,\n    }));\n    \n    return NextResponse.json(mockStops);\n  } catch (error) {\n    console.error('Error in stops API:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAmC;IAE3C,IAAI;QACF,MAAM,UAAU,OAAO,OAAO;QAE9B,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,0DAA0D;QAC1D,MAAM,YAAY,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAG,GAAG,CAAC,GAAG,IAAM,CAAC;gBACtD,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,IAAI,GAAG;gBAClC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS;gBAC7C,UAAU,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;gBAC9C,WAAW,CAAC,aAAa,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;gBACjD,aAAa,GAAG,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,QAAQ,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,QAAQ,GAAG,QAAQ,CAAC,GAAG,MAAM;gBAC1I,eAAe,GAAG,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,QAAQ,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,QAAQ,GAAG,QAAQ,CAAC,GAAG,MAAM;YAC9I,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}