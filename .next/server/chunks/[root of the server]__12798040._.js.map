{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Abel/Documents/Code/Undergraduate%20Final%20Project/reroute/src/app/api/live/route.ts"],"sourcesContent":["import { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport path from 'path';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Get the absolute path to the Python script\r\n    const scriptPath = path.resolve(process.cwd(), 'src/app/components/real-time/gtfs_file.py');\r\n    \r\n    // Use the full path to Python 3.12\r\n    const pythonPath = 'C:\\\\Users\\\\Abel\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe';\r\n    \r\n    // Construct command to run your Python script\r\n    const command = `\"${pythonPath}\" \"${scriptPath}\"`;\r\n    \r\n    console.log('Executing command:', command);\r\n    \r\n    // Execute the Python script\r\n    const { stdout, stderr } = await execAsync(command);\r\n    \r\n    if (stderr) {\r\n      console.error('Python script error:', stderr);\r\n      return NextResponse.json({ error: stderr }, { status: 500 });\r\n    }\r\n    \r\n    // Parse the output from the Python script (assuming it's JSON)\r\n    const data = JSON.parse(stdout);\r\n    \r\n    // Return the data to the frontend\r\n    return NextResponse.json(data);\r\n  } catch (error: unknown) {\r\n    console.error('Error running Python script:', error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n    return NextResponse.json({ error: errorMessage }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Parse the request body\r\n    const params = await request.json();\r\n    \r\n    // Get the absolute path to the Python script\r\n    const scriptPath = path.resolve(process.cwd(), 'src/app/components/real-time/gtfs_file.py');\r\n    \r\n    // Use the full path to Python 3.12\r\n    const pythonPath = 'C:\\\\Users\\\\Abel\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe';\r\n    \r\n    // Construct command to run your Python script with parameters\r\n    const command = `\"${pythonPath}\" \"${scriptPath}\" ${JSON.stringify(params)}`;\r\n    \r\n    console.log('Executing command:', command);\r\n    \r\n    // Execute the Python script\r\n    const { stdout, stderr } = await execAsync(command);\r\n    \r\n    if (stderr) {\r\n      console.error('Python script error:', stderr);\r\n      return NextResponse.json({ error: stderr }, { status: 500 });\r\n    }\r\n    \r\n    // Parse the output from the Python script (assuming it's JSON)\r\n    const data = JSON.parse(stdout);\r\n    \r\n    // Return the data to the frontend\r\n    return NextResponse.json(data);\r\n  } catch (error: unknown) {\r\n    console.error('Error running Python script:', error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n    return NextResponse.json({ error: errorMessage }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,YAAY,CAAA,GAAA,iGAAA,CAAA,YAAS,AAAD,EAAE,mHAAA,CAAA,OAAI;AAEzB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,6CAA6C;QAC7C,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;QAE/C,mCAAmC;QACnC,MAAM,aAAa;QAEnB,8CAA8C;QAC9C,MAAM,UAAU,CAAC,CAAC,EAAE,WAAW,GAAG,EAAE,WAAW,CAAC,CAAC;QAEjD,QAAQ,GAAG,CAAC,sBAAsB;QAElC,4BAA4B;QAC5B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,UAAU;QAE3C,IAAI,QAAQ;YACV,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAO,GAAG;gBAAE,QAAQ;YAAI;QAC5D;QAEA,+DAA+D;QAC/D,MAAM,OAAO,KAAK,KAAK,CAAC;QAExB,kCAAkC;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,yBAAyB;QACzB,MAAM,SAAS,MAAM,QAAQ,IAAI;QAEjC,6CAA6C;QAC7C,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;QAE/C,mCAAmC;QACnC,MAAM,aAAa;QAEnB,8DAA8D;QAC9D,MAAM,UAAU,CAAC,CAAC,EAAE,WAAW,GAAG,EAAE,WAAW,EAAE,EAAE,KAAK,SAAS,CAAC,SAAS;QAE3E,QAAQ,GAAG,CAAC,sBAAsB;QAElC,4BAA4B;QAC5B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,UAAU;QAE3C,IAAI,QAAQ;YACV,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAO,GAAG;gBAAE,QAAQ;YAAI;QAC5D;QAEA,+DAA+D;QAC/D,MAAM,OAAO,KAAK,KAAK,CAAC;QAExB,kCAAkC;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;AACF","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}