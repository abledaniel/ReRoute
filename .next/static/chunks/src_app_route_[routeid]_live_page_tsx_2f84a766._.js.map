{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Abel/Documents/Code/Undergraduate%20Final%20Project/reroute/src/app/route/%5Brouteid%5D/live/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'next/navigation';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport Link from 'next/link';\r\n\r\n// Define the vehicle data interface\r\ninterface Vehicle {\r\n  vehicle_id: string;\r\n  route_id: string;\r\n  current_status: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  speed: number;\r\n  bearing: number;\r\n  timestamp: string;\r\n  [key: string]: any; // Allow for additional properties\r\n}\r\n\r\n// Define the route data interface\r\ninterface Route {\r\n  route_id: string;\r\n  route_long_name: string;\r\n  route_desc: string;\r\n  route_color: string;\r\n  route_stops: any[];\r\n}\r\n\r\nexport default function LiveRouteMap() {\r\n  const params = useParams();\r\n  const routeId = params.routeid as string;\r\n  \r\n  const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n  const [route, setRoute] = useState<Route | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);\r\n  const [mapCenter, setMapCenter] = useState({ lat: 33.7175, lng: -117.8311 }); // Default to OC center\r\n\r\n  // Fetch route details\r\n  const fetchRouteDetails = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`/api/routes/${routeId}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch route details: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setRoute(data);\r\n      \r\n      // If we have stops, center the map on the first stop\r\n      if (data.route_stops && data.route_stops.length > 0) {\r\n        setMapCenter({\r\n          lat: parseFloat(data.route_stops[0].stop_lat),\r\n          lng: parseFloat(data.route_stops[0].stop_lon)\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching route details:', err);\r\n      setError('Failed to load route details');\r\n    }\r\n  }, [routeId]);\r\n\r\n  // Fetch vehicle positions\r\n  const fetchVehiclePositions = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:5000/api/vehicle-positions/${routeId}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch vehicle positions: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      \r\n      // Filter vehicles to only include those for this route\r\n      const routeVehicles = (data.vehicles || []).filter(\r\n        (vehicle: Vehicle) => vehicle.route_id === routeId\r\n      );\r\n      \r\n      setVehicles(routeVehicles);\r\n      \r\n      // If we have vehicles, center the map on the first vehicle\r\n      if (routeVehicles.length > 0) {\r\n        setMapCenter({\r\n          lat: routeVehicles[0].latitude,\r\n          lng: routeVehicles[0].longitude\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching vehicle positions:', err);\r\n      setError('Failed to load vehicle positions');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [routeId]);\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    fetchRouteDetails();\r\n    fetchVehiclePositions();\r\n    \r\n    // Set up polling every 10 seconds\r\n    const intervalId = setInterval(fetchVehiclePositions, 10000);\r\n    \r\n    // Clean up interval on component unmount\r\n    return () => clearInterval(intervalId);\r\n  }, [fetchRouteDetails, fetchVehiclePositions]);\r\n\r\n  // Map container style\r\n  const mapContainerStyle = {\r\n    width: '100%',\r\n    height: '600px'\r\n  };\r\n\r\n  // Format timestamp to readable date/time\r\n  const formatTimestamp = (timestamp: string) => {\r\n    if (!timestamp) return 'N/A';\r\n    const date = new Date(parseInt(timestamp) * 1000);\r\n    return date.toLocaleString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-6xl mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold\">\r\n          {route ? route.route_long_name : `Route ${routeId}`} - Live Map\r\n        </h1>\r\n        <Link \r\n          href={`/route/${routeId}`}\r\n          className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\r\n        >\r\n          Back to Route Details\r\n        </Link>\r\n      </div>\r\n      \r\n      {error && (\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\r\n          <p>Error: {error}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {loading ? (\r\n        <div className=\"text-center py-8\">\r\n          <p>Loading live bus data...</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className=\"mb-4\">\r\n            <p className=\"text-lg\">\r\n              <span className=\"font-medium\">Active Buses:</span> {vehicles.length}\r\n            </p>\r\n            <p className=\"text-sm text-gray-600\">\r\n              Last updated: {new Date().toLocaleTimeString()}\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"mb-6\">\r\n            <LoadScript googleMapsApiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || ''}>\r\n              <GoogleMap\r\n                mapContainerStyle={mapContainerStyle}\r\n                center={mapCenter}\r\n                zoom={13}\r\n                options={{\r\n                  styles: [\r\n                    {\r\n                      featureType: \"poi\",\r\n                      elementType: \"labels\",\r\n                      stylers: [{ visibility: \"off\" }]\r\n                    }\r\n                  ]\r\n                }}\r\n              >\r\n                {/* Display vehicles as markers */}\r\n                {vehicles.map((vehicle, index) => (\r\n                  <Marker\r\n                    key={index}\r\n                    position={{\r\n                      lat: vehicle.latitude,\r\n                      lng: vehicle.longitude\r\n                    }}\r\n                    icon={{\r\n                      path: google.maps.SymbolPath.CIRCLE,\r\n                      scale: 10,\r\n                      fillColor: route?.route_color || '#4285F4',\r\n                      fillOpacity: 0.8,\r\n                      strokeColor: '#FFFFFF',\r\n                      strokeWeight: 2\r\n                    }}\r\n                    onClick={() => setSelectedVehicle(vehicle)}\r\n                  />\r\n                ))}\r\n                \r\n                {/* Info window for selected vehicle */}\r\n                {selectedVehicle && (\r\n                  <InfoWindow\r\n                    position={{\r\n                      lat: selectedVehicle.latitude,\r\n                      lng: selectedVehicle.longitude\r\n                    }}\r\n                    onCloseClick={() => setSelectedVehicle(null)}\r\n                  >\r\n                    <div className=\"p-2\">\r\n                      <h3 className=\"font-bold\">Bus {selectedVehicle.vehicle_id || 'Unknown'}</h3>\r\n                      <p>Route: {selectedVehicle.route_id}</p>\r\n                      <p>Status: {selectedVehicle.current_status || 'N/A'}</p>\r\n                      <p>Speed: {selectedVehicle.speed ? `${selectedVehicle.speed} mph` : 'N/A'}</p>\r\n                      <p>Updated: {formatTimestamp(selectedVehicle.timestamp)}</p>\r\n                    </div>\r\n                  </InfoWindow>\r\n                )}\r\n              </GoogleMap>\r\n            </LoadScript>\r\n          </div>\r\n          \r\n          <div className=\"mt-6\">\r\n            <h2 className=\"text-xl font-semibold mb-2\">Active Buses</h2>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n              {vehicles.map((vehicle, index) => (\r\n                <div \r\n                  key={index} \r\n                  className=\"border rounded p-4 bg-white shadow cursor-pointer hover:bg-gray-50\"\r\n                  onClick={() => setSelectedVehicle(vehicle)}\r\n                >\r\n                  <h4 className=\"font-bold mb-2\">Bus {vehicle.vehicle_id || 'Unknown'}</h4>\r\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                    <div>\r\n                      <span className=\"font-medium\">Status:</span> {vehicle.current_status || 'N/A'}\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"font-medium\">Speed:</span> {vehicle.speed ? `${vehicle.speed} mph` : 'N/A'}\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"font-medium\">Updated:</span> {formatTimestamp(vehicle.timestamp)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            \r\n            {vehicles.length === 0 && (\r\n              <div className=\"text-center py-8 bg-gray-50 rounded\">\r\n                <p>No active buses found for this route.</p>\r\n                <p className=\"text-sm text-gray-600 mt-2\">\r\n                  This could mean the route is not currently in service or there are no vehicles reporting their position.\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}